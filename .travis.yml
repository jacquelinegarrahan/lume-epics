language: python
sudo: required

branches:
  only:
  - master
  - dev
  - build_cleanup
  - /^v\d*\.?\d*$/

env:
  global:
    - secure: "lmHnvnDEb44KnAu9T1qlbd9ahSNTY873TpmbI0tio/sSzHxN3P4hzjNB2+KOtOo9qBhuXNWBfUcJIG1xQ37KIYpWx/5ptHFP8cVR7GPdKkOdY8C6tRvOuNSEdlv6cWN4p7P9obIkFcXGr2FfxIDZYO/0ipjlYf6uOzRlUWmrq3OKvNyUL/i6XFPSNXf+M+Lgt/AMeVTvGXXJpvhfxl1r5ld2W97XsTiyHb/AMuMkXs6RiE60UPwxpjyOANowZw1rdcFu/tObjCk3qi8D1VJp8vmNhF5eKzbSBGvBQU/TUkJhGitA3mi9MvoBlvdRhYCelyfSrwQ4EuyX2Pj1gvCH2JjNT3vPA48/yi3EgKIle1U1gUqHrB6PT+aSkn35x8FG0VzecX5hhfRZ5cb/2vPhVMFZwSrlRH/Yd88S+L/faly+qilEDXxnuyrWz1eXX2Fa3ga8Oqxtnzm8l9gAesN3w8jiddbF5tcpftG4Eu9/JSQJ+W+KAsnda6PllF94qL4VTV9spdSgZFugp5UztLLiLe0bpqPrtiswfRKHyzY7RRm7pHUcMpMlyzrQfkFZexB9ttnE+OUBvOGAsiaczAN2XEYcJA4gaMaD2WEpIniW0zzTxZUbZo8EFFctc5yrqnV8kyLXgjBtwO1VeQfnZU9sqMiG5RjS6Pf5tNYLcTdOAe4="

matrix:
  include:
    - os: osx
      language: generic
      env: 
        - TOXENV=py37
    - os: osx
      language: generic
      env: 
        - TOXENV=py38
    - os: linux
      python: 3.7
    - os: linux
      python: 3.8
      env: 
        - CONDA_UPLOAD=1
        - BUILD_DOCS=1

install:
  # Install the appropriate miniconda depending on the os and miniconda version
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then MINICONDA_OS=Linux; else MINICONDA_OS=MacOSX; fi
  - wget https://repo.anaconda.com/miniconda/Miniconda3-latest-$MINICONDA_OS-x86_64.sh -O miniconda.sh
  - bash miniconda.sh -b -p "$HOME"/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - source "$HOME"/miniconda/etc/profile.d/conda.sh

  # set configs
  - conda config --set always_yes yes --set changeps1 no
  - conda config --add channels conda-forge
  - conda config --set channel_priority strict
  - conda config --append channels jrgarrahan # temporary lume-model fix
  - conda install conda-build anaconda-client
  - conda update -q conda conda-build

  # log info for debugging
  - conda info -a

  # create build & add to channel
  - conda build -q conda-recipe --python=$TRAVIS_PYTHON_VERSION --output-folder bld-dir
  - conda config --add channels "file://`pwd`/bld-dir"

  # create env
  - conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION --file dev-requirements.txt
  - conda activate test-environment

script:
  - pytest
  # Build docs.
  - set -e
  - |
    if [[ -n "$DOCTR_DEPLOY_ENCRYPTION_KEY_SLACLAB_LUME_EPICS" && "${BUILD_DOCS:=0}" == '1' && $LUME_EPICS_REPO == 'slaclab' ]]; then
        pip install -r docs-requirements.txt
        mkdocs build -c -d site
        # Publish docs.
        doctr deploy . --built-docs site --deploy-branch-name gh-pages
    fi

after_success:
  - echo $TRAVIS_TAG
  - echo $LUME_EPICS_REPO
  - echo $CONDA_UPLOAD
  - |
    if [[ $TRAVIS_BRANCH == $TRAVIS_TAG  && $TRAVIS_TAG != '' && $LUME_EPICS_REPO == 'slaclab' && "${CONDA_UPLOAD:=0}" == '1' ]]; then
        echo "Uploading to jrgarrahan channel"
        export ANACONDA_API_TOKEN=$CONDA_UPLOAD_TOKEN
        anaconda upload bld-dir/noarch/*.tar.bz2
    fi
  - |
    if [[ $LUME_EPICS_REPO == 'dev' && "${CONDA_UPLOAD:=0}" == '1' ]]; then
        echo "Uploading to jrgarrahan channel"
        export ANACONDA_API_TOKEN=$CONDA_UPLOAD_TOKEN
        anaconda upload bld-dir/noarch/*.tar.bz2 --label dev
    fi